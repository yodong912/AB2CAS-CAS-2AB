role role_A(A:agent,B:agent,G:text,SND,RCV:channel(dy))
played_by A
def=
	local
		State:nat,Y:text,X:text,N:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> State':=1 /\ X':=new() /\ SND(exp(G,X'))
		2. State=1 /\ RCV(exp(G,Y')) =|> State':=2 /\ N':=new() /\ secret(N',sec_1,{A}) /\ SND({N'}_exp(exp(G,X),Y'))
end role

role role_B(A:agent,B:agent,G:text,SND,RCV:channel(dy))
played_by B
def=
	local
		State:nat,Y:text,X:text,N:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(exp(G,X')) =|> State':=1 /\ Y':=new() /\ SND(exp(G,Y'))
		3. State=1 /\ RCV({N'}_exp(exp(G,X),Y)) =|> State':=2 /\ secret(N',sec_1,{A})
end role

role session1(A:agent,B:agent,G:text)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_B(A,B,G,SND2,RCV2) /\ role_A(A,B,G,SND1,RCV1)
end role

role environment()
def=
	const
		hash_0:hash_func,b:agent,a:agent,f:text,sec_1:protocol_id,sec_2:protocol_id
	intruder_knowledge = {a,b,f}
	composition
		session1(a,b,f)
end role

goal
	secrecy_of sec_1
	secrecy_of sec_2
end goal

environment()